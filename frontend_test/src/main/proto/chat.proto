syntax = "proto3";

option java_package = "org.example.shared";
option java_outer_classname = "ChatProto";

service ChatService {
  // Подключение (server-streaming для получения сообщений)
  rpc Connect(ConnectRequest) returns (stream ChatMessage) {}

  // Отправка сообщения (unary: один запрос → один ответ с bool)
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
}

message ConnectRequest {
  string user_name = 1;
}

message SendMessageRequest {
  string from_user_name = 1;
  string to_user_name = 2;  // ID получателя
  string text = 3;
  string date_time = 4;
  // meta - info (token = GUID + CM + PM + IV) -> HMAC256
}

//
// initRoomRequest

// from
// to user
// meta (выше)
// A (g,p)
//

// ответ на запрос о создании комнаты
// answer B
//

//owner может удалить чат -> Сообщения удалятся у обоих
//owner только удаляет subs -> сообщения у создаьтеля остаются и комната, а у subs удаляется комната (и каскадно все сообщения)
// owner покинет чат -> у него удаляются сообщения, но subs становится owner (у него сообщения не удаляются)
// subs удаляется сам -> сообщения удаляются только у subs
// после каждого из этих случаев нужно выполнять initRoomRequest

message SendMessageResponse {
  bool delivered = 1;  // true, если получатель онлайн
}

message ChatMessage {
  string from_user_name = 1;
  string text = 2;
  string date_time = 3;
  //meta
}

